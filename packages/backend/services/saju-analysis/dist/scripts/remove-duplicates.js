"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sqlite3_1 = __importDefault(require("sqlite3"));
const path_1 = __importDefault(require("path"));
const dbPath = path_1.default.join(__dirname, '../../../data/saju.db');
const db = new sqlite3_1.default.Database(dbPath);
console.log('üßπ Ï£ºÎä• Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÜåÌï≠Î™© Ï§ëÎ≥µ Ï†úÍ±∞ ÏãúÏûë...\n');
db.serialize(() => {
    // Ìä∏ÎûúÏû≠ÏÖò ÏãúÏûë
    db.run('BEGIN TRANSACTION', (err) => {
        if (err) {
            console.error('‚ùå Ìä∏ÎûúÏû≠ÏÖò ÏãúÏûë Ïã§Ìå®:', err);
            db.close();
            return;
        }
        // Ï§ëÎ≥µÎêú Ìï≠Î™©Îì§ Ï°∞Ìöå (Í∞Å Í∑∏Î£πÏóêÏÑú Ï≤´ Î≤àÏß∏ IDÎßå Ïú†ÏßÄ)
        const findDuplicatesQuery = `
      SELECT 
        mid.name as middle_category,
        min.name as item_name,
        MIN(min.id) as keep_id,
        GROUP_CONCAT(min.id) as all_ids,
        COUNT(*) as duplicate_count
      FROM major_categories mc
      JOIN middle_categories mid ON mc.id = mid.major_id
      JOIN minor_categories min ON mid.id = min.middle_id
      WHERE mc.type = 'positive'
      GROUP BY mid.name, min.name
      HAVING COUNT(*) > 1
      ORDER BY mid.name, min.name
    `;
        db.all(findDuplicatesQuery, (err, duplicates) => {
            if (err) {
                console.error('‚ùå Ï§ëÎ≥µ Ï°∞Ìöå Ïã§Ìå®:', err);
                db.run('ROLLBACK');
                db.close();
                return;
            }
            let totalRemoved = 0;
            let processedCategories = new Set();
            console.log(`üìã ${duplicates.length}Í∞úÏùò Ï§ëÎ≥µ Í∑∏Î£π Î∞úÍ≤¨\n`);
            console.log('Ï§ëÎ≥µ Ï†úÍ±∞ ÏßÑÌñâ Ï§ë...\n');
            // Í∞Å Ï§ëÎ≥µ Í∑∏Î£πÏóê ÎåÄÌï¥ Ï≤òÎ¶¨
            duplicates.forEach((dup, index) => {
                const idsToDelete = dup.all_ids.split(',')
                    .map((id) => parseInt(id))
                    .filter((id) => id !== dup.keep_id);
                if (!processedCategories.has(dup.middle_category)) {
                    console.log(`\nüìÅ ${dup.middle_category}:`);
                    processedCategories.add(dup.middle_category);
                }
                console.log(`   - "${dup.item_name}": ${dup.duplicate_count}Í∞ú ‚Üí 1Í∞ú (ID ${dup.keep_id} Ïú†ÏßÄ)`);
                // Ï§ëÎ≥µ Ìï≠Î™© ÏÇ≠Ï†ú
                const deleteQuery = `DELETE FROM minor_categories WHERE id IN (${idsToDelete.join(',')})`;
                db.run(deleteQuery, function (err) {
                    if (err) {
                        console.error(`   ‚ùå ÏÇ≠Ï†ú Ïã§Ìå® (${dup.item_name}):`, err);
                    }
                    else {
                        totalRemoved += this.changes;
                    }
                });
            });
            // Î™®Îì† ÏÇ≠Ï†ú ÏûëÏóÖÏù¥ ÏôÑÎ£åÎêú ÌõÑ ÌÜµÍ≥Ñ Ï∂úÎ†•
            setTimeout(() => {
                // ÏÇ≠Ï†ú ÌõÑ ÌÜµÍ≥Ñ Ï°∞Ìöå
                const statsQuery = `
          SELECT 
            mid.name as middle_category,
            COUNT(DISTINCT min.name) as unique_count,
            COUNT(min.id) as total_count
          FROM major_categories mc
          JOIN middle_categories mid ON mc.id = mid.major_id
          JOIN minor_categories min ON mid.id = min.middle_id
          WHERE mc.type = 'positive'
          GROUP BY mid.name
          ORDER BY mid.name
        `;
                db.all(statsQuery, (err, stats) => {
                    if (err) {
                        console.error('‚ùå ÌÜµÍ≥Ñ Ï°∞Ìöå Ïã§Ìå®:', err);
                        db.run('ROLLBACK');
                    }
                    else {
                        console.log('\n' + '='.repeat(60));
                        console.log('\n‚úÖ Ï§ëÎ≥µ Ï†úÍ±∞ ÏôÑÎ£å!\n');
                        console.log('üìä ÏµúÏ¢Ö Í≤∞Í≥º:\n');
                        stats.forEach(stat => {
                            console.log(`   ${stat.middle_category}: ${stat.unique_count}Í∞ú`);
                        });
                        const totalItems = stats.reduce((sum, stat) => sum + stat.unique_count, 0);
                        console.log('\n' + '='.repeat(60));
                        console.log(`\nüéØ ÏöîÏïΩ:`);
                        console.log(`   - Ï†úÍ±∞Îêú Ï§ëÎ≥µ Ìï≠Î™©: ${totalRemoved}Í∞ú`);
                        console.log(`   - ÏµúÏ¢Ö Í≥†Ïú† Ìï≠Î™© Ïàò: ${totalItems}Í∞ú`);
                        console.log(`   - Ïπ¥ÌÖåÍ≥†Î¶¨ Ïàò: ${stats.length}Í∞ú`);
                        // Ìä∏ÎûúÏû≠ÏÖò Ïª§Î∞ã
                        db.run('COMMIT', (err) => {
                            if (err) {
                                console.error('‚ùå Ïª§Î∞ã Ïã§Ìå®:', err);
                                db.run('ROLLBACK');
                            }
                            else {
                                console.log('\n‚ú® Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å!');
                            }
                            db.close();
                        });
                    }
                });
            }, 1000);
        });
    });
});
//# sourceMappingURL=remove-duplicates.js.map