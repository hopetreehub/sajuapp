"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sqlite3_1 = __importDefault(require("sqlite3"));
const path_1 = __importDefault(require("path"));
const dbPath = path_1.default.join(__dirname, '../../../data/saju.db');
const db = new sqlite3_1.default.Database(dbPath);
console.log('üìö Ï£ºÎä• - Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨ Ï§ëÎ≥µ Ï†ïÎ¶¨ ÏãúÏûë...\n');
db.serialize(() => {
    db.run('BEGIN TRANSACTION', (err) => {
        if (err) {
            console.error('‚ùå Ìä∏ÎûúÏû≠ÏÖò ÏãúÏûë Ïã§Ìå®:', err);
            db.close();
            return;
        }
        console.log('1Ô∏è‚É£ Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨ Ï§ëÎ≥µ Î∂ÑÏÑù...');
        // Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò Ï§ëÎ≥µ ÏÉÅÌô© ÌååÏïÖ
        db.all(`
      SELECT mc.name, mc.id, mc.middle_id, mdc.name as middle_name
      FROM minor_categories mc
      LEFT JOIN middle_categories mdc ON mc.middle_id = mdc.id
      WHERE mdc.name = 'Í≥ºÎ™©'
      ORDER BY mc.name, mc.id
    `, (err, subjects) => {
            if (err) {
                console.error('‚ùå Í≥ºÎ™© Ìï≠Î™© Î∂ÑÏÑù Ïã§Ìå®:', err);
                db.run('ROLLBACK');
                db.close();
                return;
            }
            console.log(`üìö Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨ ÌòÑÏû¨ ÏÉÅÌÉú: ${subjects.length}Í∞ú Ìï≠Î™©`);
            // Ïù¥Î¶ÑÎ≥ÑÎ°ú Í∑∏Î£πÌôî
            const groups = {};
            subjects.forEach(item => {
                if (!groups[item.name])
                    groups[item.name] = [];
                groups[item.name].push(item);
            });
            console.log('üìä Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉÅÏÑ∏ Î∂ÑÏÑù:');
            let toDelete = [];
            let normalCount = 0;
            let duplicateCount = 0;
            Object.entries(groups).forEach(([name, items]) => {
                if (items.length > 1) {
                    console.log(`‚ö†Ô∏è "${name}": ${items.length}Í∞ú`);
                    duplicateCount++;
                    // Í∞ÄÏû• ÏûëÏùÄ IDÎßå ÎÇ®Í∏∞Í≥† ÎÇòÎ®∏ÏßÄÎäî ÏÇ≠Ï†ú ÎåÄÏÉÅ
                    const sorted = items.sort((a, b) => a.id - b.id);
                    const keepId = sorted[0].id;
                    const deleteIds = sorted.slice(1).map(item => item.id);
                    console.log(`   - Ïú†ÏßÄ: ID ${keepId}`);
                    console.log(`   - ÏÇ≠Ï†ú: ID ${deleteIds.join(', ')}`);
                    toDelete.push(...deleteIds);
                }
                else {
                    console.log(`‚úÖ "${name}": ${items.length}Í∞ú`);
                    normalCount++;
                }
            });
            console.log(`\nüìä ÏöîÏïΩ: Ï†ïÏÉÅ ${normalCount}Í∞ú, Ï§ëÎ≥µ ${duplicateCount}Í∞ú`);
            if (toDelete.length === 0) {
                console.log('\n‚úÖ Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê Îçî Ïù¥ÏÉÅ ÏÇ≠Ï†úÌï† Ï§ëÎ≥µÏù¥ ÏóÜÏäµÎãàÎã§!');
                db.run('COMMIT', () => {
                    console.log('\n‚ú® Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨ Ïù¥ÎØ∏ Ï†ïÏÉÅ ÏÉÅÌÉú!');
                    db.close();
                });
                return;
            }
            console.log(`\n2Ô∏è‚É£ Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨ ${toDelete.length}Í∞ú Ï§ëÎ≥µ Ìï≠Î™© ÏÇ≠Ï†ú Ï§ë...`);
            // Ï§ëÎ≥µ Ìï≠Î™©Îì§ ÏÇ≠Ï†ú
            const placeholders = toDelete.map(() => '?').join(',');
            db.run(`
        DELETE FROM minor_categories 
        WHERE id IN (${placeholders})
      `, toDelete, (err) => {
                if (err) {
                    console.error('‚ùå Í≥ºÎ™© Ï§ëÎ≥µ ÏÇ≠Ï†ú Ïã§Ìå®:', err);
                    db.run('ROLLBACK');
                    db.close();
                    return;
                }
                console.log('‚úÖ Í≥ºÎ™© Ï§ëÎ≥µ ÏÇ≠Ï†ú ÏôÑÎ£å!');
                // ÏµúÏ¢Ö ÌôïÏù∏
                console.log('\n3Ô∏è‚É£ Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨ ÏµúÏ¢Ö Í≤ÄÏ¶ù...');
                db.all(`
          SELECT mc.name, COUNT(*) as count
          FROM minor_categories mc
          LEFT JOIN middle_categories mdc ON mc.middle_id = mdc.id
          WHERE mdc.name = 'Í≥ºÎ™©'
          GROUP BY mc.name
          HAVING count > 1
        `, (err, stillDuplicates) => {
                    if (err) {
                        console.error('‚ùå ÏµúÏ¢Ö Í≤ÄÏ¶ù Ïã§Ìå®:', err);
                        db.run('ROLLBACK');
                        db.close();
                        return;
                    }
                    if (stillDuplicates.length > 0) {
                        console.log('‚ö†Ô∏è Ïó¨Ï†ÑÌûà Ï§ëÎ≥µÏù∏ Ìï≠Î™©:');
                        stillDuplicates.forEach(dup => {
                            console.log(`   - "${dup.name}": ${dup.count}Í∞ú`);
                        });
                    }
                    else {
                        console.log('‚úÖ Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨ Ï§ëÎ≥µ ÏôÑÏ†Ñ Ï†úÍ±∞ ÏôÑÎ£å!');
                    }
                    // Ï†ÑÏ≤¥ Í≥ºÎ™© Ìï≠Î™© Î™©Î°ù ÌëúÏãú
                    db.all(`
            SELECT mc.name
            FROM minor_categories mc
            LEFT JOIN middle_categories mdc ON mc.middle_id = mdc.id
            WHERE mdc.name = 'Í≥ºÎ™©'
            ORDER BY mc.name
          `, (err, finalItems) => {
                        if (err) {
                            console.error('‚ùå ÏµúÏ¢Ö Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', err);
                        }
                        else {
                            console.log('\nüìö ÏµúÏ¢Ö Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù:');
                            finalItems.forEach((item, index) => {
                                console.log(`   ${index + 1}. ${item.name}`);
                            });
                        }
                        db.run('COMMIT', (err) => {
                            if (err) {
                                console.error('‚ùå Ïª§Î∞ã Ïã§Ìå®:', err);
                                db.run('ROLLBACK');
                            }
                            else {
                                console.log('\n' + '='.repeat(50));
                                console.log('‚ú® Í≥ºÎ™© Ïπ¥ÌÖåÍ≥†Î¶¨ Ï§ëÎ≥µ Ï†ïÎ¶¨ ÏôÑÎ£å!');
                                console.log(`üéØ Í≤∞Í≥º: ${toDelete.length}Í∞ú Ï§ëÎ≥µ Ï†úÍ±∞Îê®`);
                                console.log('='.repeat(50));
                            }
                            db.close();
                        });
                    });
                });
            });
        });
    });
});
//# sourceMappingURL=fix-subject-category.js.map